// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	entity "github.com/alkamalp/crm-golang/entity"
	mock "github.com/stretchr/testify/mock"
)

// CustomerInterfaceRepo is an autogenerated mock type for the CustomerInterfaceRepo type
type CustomerInterfaceRepo struct {
	mock.Mock
}

// CreateCustomer provides a mock function with given fields: Customer
func (_m *CustomerInterfaceRepo) CreateCustomer(Customer *entity.Customer) (*entity.Customer, error) {
	ret := _m.Called(Customer)

	var r0 *entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) (*entity.Customer, error)); ok {
		return rf(Customer)
	}
	if rf, ok := ret.Get(0).(func(*entity.Customer) *entity.Customer); ok {
		r0 = rf(Customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Customer) error); ok {
		r1 = rf(Customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomer provides a mock function with given fields: id
func (_m *CustomerInterfaceRepo) DeleteCustomer(id uint) (interface{}, error) {
	ret := _m.Called(id)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (interface{}, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerById provides a mock function with given fields: id
func (_m *CustomerInterfaceRepo) GetCustomerById(id uint) (entity.Customer, error) {
	ret := _m.Called(id)

	var r0 entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.Customer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.Customer); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Customer)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomer provides a mock function with given fields: customer, id
func (_m *CustomerInterfaceRepo) UpdateCustomer(customer *entity.Customer, id uint) (interface{}, error) {
	ret := _m.Called(customer, id)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Customer, uint) (interface{}, error)); ok {
		return rf(customer, id)
	}
	if rf, ok := ret.Get(0).(func(*entity.Customer, uint) interface{}); ok {
		r0 = rf(customer, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Customer, uint) error); ok {
		r1 = rf(customer, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustomerInterfaceRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerInterfaceRepo creates a new instance of CustomerInterfaceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerInterfaceRepo(t mockConstructorTestingTNewCustomerInterfaceRepo) *CustomerInterfaceRepo {
	mock := &CustomerInterfaceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
